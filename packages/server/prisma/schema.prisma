generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  USER
  AUTHOR
  ADMIN
}

enum ArticleStatus {
  PUBLISHED
  DRAFT
  REJECTED
  IN_REVIEW
}

enum AdPosition {
  ABOVE_POST
  INLINE_POST
  BELOW_POST
  POP_UP
}

model User {
  id               String    @id @unique @default(uuid())
  email            String    @unique
  username         String    @unique
  name             String?
  phoneNumber      String?
  profilePictureId String?
  profilePicture   Media?    @relation(name: "UserProfilePictures", fields: [profilePictureId], references: [id])
  about            String?
  password         String
  meta_title       String?
  meta_description String?
  role             UserRole  @default(USER)
  articles         Article[] @relation("ArticleAuthors")
  topics           Topic[]   @relation("TopicAuthors")
  medias           Media[]   @relation("MediaAuthors")
  comments         Comment[] @relation("CommentAuthors")
  ads              Ad[]      @relation("AdAuthors")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Article {
  id               String        @id @unique @default(uuid())
  title            String
  content          String
  excerpt          String
  slug             String        @unique
  meta_title       String?
  meta_description String?
  author           User          @relation(name: "ArticleAuthors", fields: [authorId], references: [id])
  authorId         String
  topics           Topic[]       @relation(name: "ArticleTopics")
  comments         Comment[]     @relation(name: "ArticleComments")
  featuredImageId  String
  featuredImage    Media         @relation(name: "ArticleFeaturedImages", fields: [featuredImageId], references: [id])
  status           ArticleStatus @default(PUBLISHED)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
}

model Topic {
  id               String    @id @unique @default(uuid())
  title            String
  description      String?
  slug             String    @unique
  meta_title       String?
  meta_description String?
  featuredImageId  String?
  featuredImage    Media?    @relation(name: "TopicFeaturedImages", fields: [featuredImageId], references: [id])
  author           User      @relation(name: "TopicAuthors", fields: [authorId], references: [id])
  authorId         String
  articles         Article[] @relation(name: "ArticleTopics")
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt
}

model Media {
  id          String    @id @unique @default(uuid())
  name        String    @unique
  url         String    @unique
  type        String
  description String?
  alt         String?
  author      User      @relation(name: "MediaAuthors", fields: [authorId], references: [id])
  authorId    String
  articles    Article[] @relation(name: "ArticleFeaturedImages")
  topics      Topic[]   @relation(name: "TopicFeaturedImages")
  users       User[]    @relation(name: "UserProfilePictures")
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Comment {
  id        String   @id @unique @default(uuid())
  content   String
  articles  Article  @relation(name: "ArticleComments", fields: [articleId], references: [id])
  articleId String
  author    User     @relation(name: "CommentAuthors", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Ad {
  id        String     @id @unique @default(uuid())
  title     String     @unique
  content   String
  position  AdPosition @default(ABOVE_POST)
  author    User       @relation(name: "AdAuthors", fields: [authorId], references: [id])
  authorId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Setting {
  id        String     @id @unique @default(uuid())
  key       String @unique
  value     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
